const isDebug = process.env.NODE_ENV === 'development';

// Hook for statics files such as images or css files
const cssModulesHook = require('css-modules-require-hook');
cssModulesHook({
  extensions: ['.css'],
  camelCase: 'dashes',
  generateScopedName: isDebug
    ? '[name]-[local]-[hash:base64:5]'
    : '[hash:base64:5]'
});

// React Universal tools and components
const React = require('react');
const createElement = React.createElement;
const ReactDOM = require('react-dom/server');
const renderToString = ReactDOM.renderToString;
const { Provider } = require('react-redux');
const { StaticRouter } = require('react-router');

const configureStore = require('../../client/store/configureStore').default;
const App = require('../../client/components/App').default;
const Html = require('../../client/components/Html').default;
const config = require('../../client/config').default;

// Assets file generated by webpack
const assets = require('../../build/assets.json');

// Render React UI from the server
const serverSideRender = (req, res, next) => {
  try {
    const store = configureStore({ });
    const context = { store };
    const data = {
      title: config.app.title,
      description: config.app.description,
      favicon: '',
      styles: [assets.client.css],
      scripts: [assets.vendor.js, assets.client.js],
      state: store.getState(),
      children: renderToString(
        createElement(
          Provider,
          { store },
          createElement(
            StaticRouter,
            { location: req.originalUrl, context },
            createElement(App, {})
          )
        )
      )
    };

    let status = 200;
    if (context.url) {
      status = 302;
      req.originalUrl = context.url;
    }
    if (context.status === '404') {
      status = 404;
    }

    const html = ReactDOM.renderToStaticMarkup(createElement(Html, data));

    res.status(status);
    res.send(`<!doctype html>${html}`);
  } catch (err) {
    next(err);
  }
};

module.exports = serverSideRender;
